variables:
  DOCKER_DRIVER: overlay2
  STANDARDFLAGS: -DHEPMC3_TEST_VALGRIND=ON  -DHEPMC3_ENABLE_PROTOBUFIO:BOOL=ON -DHEPMC3_ENABLE_ROOTIO:BOOL=ON -DHEPMC3_BUILD_EXAMPLES:BOOL=ON -DHEPMC3_ENABLE_TEST:BOOL=ON -DHEPMC3_TEST_VALGRIND:BOOL=ON -DHEPMC3_ENABLE_PYTHON:BOOL=ON -DHEPMC3_INSTALL_INTERFACES:BOOL=ON -DCMAKE_EXPORT_COMPILE_COMMANDS:BOOL=ON -DHEPMC3_BUILD_DOCS:BOOL=ON  -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON 
  #-DCMAKE_CXX_FLAGS="-Wpedantic -Wall -Wextra"
stages:
  - check_if_dockerfile_updated
  - build_docker_image
  - build
  - LCG
########################################################################

LCG_x86_64-alma9:
  only:
    variables:
     - $CI_SERVER_HOST=="gitlab.cern.ch"
  image: gitlab-registry.cern.ch/sft/docker/alma9-core:latest
  tags:
    - k8s-cvmfs
  stage: LCG
  script:
    - |
      export ATLAS_LOCAL_ROOT_BASE=/cvmfs/atlas.cern.ch/repo/ATLASLocalRootBase
      uname -m
      export LCGRELEASE=LCG_106a_ATLAS_8 
      UNAME=$(uname -m)
      export GCCV=13
      set -x
      export LCGPLATFORM=$UNAME"-el9-gcc"$GCCV"-opt"
      export LCGLOCATION=/cvmfs/sft.cern.ch/lcg/releases/$LCGRELEASE
      export HM3_ROOT_VERSION=$(cat  $LCGLOCATION/LCG_externals_$LCGPLATFORM'.txt' | grep 'ROOT;' | cut -f 3 -d';' | tr -d ' ')
      export HM3_VALGRIND_VERSION=$(cat  $LCGLOCATION/LCG_externals_$LCGPLATFORM'.txt' | grep 'valgrind;' | cut -f 3 -d';' | tr -d ' ')
      export HM3_GRAPHVIZ_VERSION=$(cat  $LCGLOCATION/LCG_externals_$LCGPLATFORM'.txt' | grep '^graphviz;' | cut -f 3 -d';' | tr -d ' ')
      export HM3_PYTHON_VERSION=$(cat  $LCGLOCATION/LCG_externals_$LCGPLATFORM'.txt' | grep 'Python;' | cut -f 3 -d';' | tr -d ' ')
      export PYTHON3VERSION=$(echo $HM3_PYTHON_VERSION | cut -f 1,2 -d. | tr -d .)
      export PYTHON3DOTVERSION=$(echo $HM3_PYTHON_VERSION | cut -f 1,2 -d. )
      export HM3_HEPMC_VERSION=$(cat  $LCGLOCATION/LCG_externals_$LCGPLATFORM'.txt' | grep 'HepMC;' | cut -f 3 -d';' | tr -d ' ')
      export HM3_PROTOBUF_VERSION=$(cat  $LCGLOCATION/LCG_externals_$LCGPLATFORM'.txt' | grep 'protobuf;' | cut -f 3 -d';' | tr -d ' ')
      export HM3_PROTOBUF2_VERSION=$(cat  $LCGLOCATION/LCG_externals_$LCGPLATFORM'.txt' | grep 'protobuf2;' | cut -f 3 -d';' | tr -d ' ')
      export HM3_PYTHIA8_VERSION=$(cat  $LCGLOCATION/LCG_generators_$LCGPLATFORM'.txt' | grep 'pythia8;' | cut -f 3 -d';' | tr -d ' ')
      source /cvmfs/sft.cern.ch/lcg/contrib/gcc/${GCCV}/${LCGPLATFORM}/setup.sh
      export PATH=/cvmfs/sft.cern.ch/lcg/contrib/CMake/latest/Linux-x86_64/bin/:${PATH}
      source ${LCGLOCATION}/ROOT/${HM3_ROOT_VERSION}/${LCGPLATFORM}/ROOT-env.sh
      export ROOTSYS=${LCGLOCATION}/ROOT/${HM3_ROOT_VERSION}/${LCGPLATFORM}/
      source ${LCGLOCATION}/valgrind/${HM3_VALGRIND_VERSION}/${LCGPLATFORM}/valgrind-env.sh
      source ${LCGLOCATION}/graphviz/${HM3_GRAPHVIZ_VERSION}/${LCGPLATFORM}/graphviz-env.sh
      source ${LCGLOCATION}/Python/${HM3_PYTHON_VERSION}/${LCGPLATFORM}/Python-env.sh
      source ${LCGLOCATION}/HepMC/${HM3_HEPMC_VERSION}/${LCGPLATFORM}/HepMC-env.sh
      source ${LCGLOCATION}/protobuf2/${HM3_PROTOBUF2_VERSION}/${LCGPLATFORM}/protobuf2-env.sh
      export Protobuf_ROOT=$(pkg-config protobuf --variable=prefix)
      export LARG=" "
      export LARG="$LARG "-DPYTHIA8_ROOT_DIR=${LCGLOCATION}/MCGenerators/pythia8/${HM3_PYTHIA8_VERSION}/${LCGPLATFORM}
      export LARG="$LARG "-DHEPMC2_ROOT_DIR=${LCGLOCATION}/HepMC/${HM3_HEPMC_VERSION}/${LCGPLATFORM}/
      export LARG="$LARG "-DGRAPHVIZ_ROOT=${LCGLOCATION}/graphviz/${HM3_GRAPHVIZ_VERSION}/${LCGPLATFORM}/
      export LARG="$LARG "-DProtobuf_INCLUDE_DIR=${Protobuf_ROOT}/include
      export LARG="$LARG "-DProtobuf_LIBRARY=${Protobuf_ROOT}/lib/libprotobuf.so
      export LARG="$LARG "-DHEPMC3_USE_INTERFACE_FROM_PYTHIA8:BOOL=OFF
      export LARG="$LARG "-DCMAKE_INSTALL_PREFIX=$(pwd)/install
      export LARG="$LARG "-DHEPMC3_Python_SITEARCH${PYTHON3VERSION}=$(pwd)/install/lib/python${PYTHON3DOTVERSION}/site-packages
      mkdir BUILD
      cd BUILD
      set -x
      cmake .. -DCMAKE_CXX_FLAGS="-Wpedantic -Wall -Wextra" ${STANDARDFLAGS} ${LARG}  ${EXTRACMAKEFLAGS}
      set +x
      make -j $(nproc)
      make -j $(nproc) install
      ctest -j 5 --output-on-failure

.check_commit: &check_commit
  stage: check_if_dockerfile_updated
  image:
        name: alpine/git
        entrypoint: [""]
  script:
        - rm -rf todo-$OS'_'$FREL.txt
        - export SUFFIX=
        - set -x
        - if [ $OS == "CentOS" ]; then export SUFFIX=$FREL; fi
        - git log -1 | grep $OS'Dockerfile'$FREL | head -n 1 >> todo-$OS'_'$FREL.txt || touch todo-$OS'_'$FREL.txt
        - git diff --name-only HEAD HEAD~1 | grep CI/$OS/Dockerfile$SUFFIX | head -n 1 >> todo-$OS'_'$FREL.txt || touch todo-$OS'_'$FREL.txt
        - if [ -s todo-$OS'_'$FREL.txt ]; then cat CI/$OS/Dockerfile$SUFFIX | sed 's/fedora:35/fedora:'$FREL'/g' > todo-$OS'_'$FREL.txt; fi
        - if [ $CI_PIPELINE_SOURCE == "schedule" ]; then cat CI/$OS/Dockerfile$SUFFIX | sed 's/fedora:35/fedora:'$FREL'/g' > todo-$OS'_'$FREL.txt; fi
        - cat todo-$OS'_'$FREL.txt
        - exit 0
  variables:
    GIT_DEPTH: "3"
  artifacts:
    paths:
      - todo-${OS}_${FREL}.txt
    expire_in: 1 day


########################################################################

.build_image: &build_image
  stage: build_docker_image
  image:
        name: gcr.io/kaniko-project/executor:debug
        entrypoint: [""]
  script:
        - echo $CI_REGISTRY_IMAGE:$OS_$FREL $CI_PROJECT_DIR
        - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
        - if [ -s todo-${OS}_${FREL}.txt ]; then /kaniko/executor --context $CI_PROJECT_DIR --dockerfile todo-${OS}_${FREL}.txt --destination $CI_REGISTRY_IMAGE:${OS}_${FREL} ; fi
  variables:
    GIT_DEPTH: "2"
########################################################################

.any: &any
  image: gitlab-registry.cern.ch/hepmc/hepmc3:${OS}_${FREL}
  stage: build
  only:
    variables:
     - $CI_SERVER_HOST=="gitlab.cern.ch"
  before_script:
    - set -x
    - uname -a
    - cat /etc/issue
    - export GIT_DEPTH=1
  cache:
   - key: cache-${OS}-${FREL}-${TOOLSET}
     paths:
       -  CACHES/cache-${OS}-${FREL}-${TOOLSET}/
.standalone: &standalone
    - export TTOP=$(pwd)
    - mkdir -p STANDALONE
    - cp -r INSTALL/share/doc/HepMC3/examples STANDALONE
    - cd STANDALONE/examples
    - $CMAKE -S . -B BUILD -DUSE_INSTALLED_HEPMC3=ON -DHepMC3_DIR=$TTOP/INSTALL/share/HepMC3/cmake/
    - $CMAKE --build BUILD 
    - cd $TTOP
    - cd python
    - $CMAKE -S . -B BUILD -DUSE_INSTALLED_HEPMC3=ON -DHepMC3_DIR=$TTOP/INSTALL/share/HepMC3/cmake/ -DHEPMC3_ENABLE_TEST=ON $CACHINGFLAGS
    - $CMAKE --build BUILD 
    - cd BUILD
    - $CTEST -j 5 --output-on-failure
    - cd $TTOP

.oldstandaloneexamples: &oldstandaloneexamples
    - export TTOP=$(pwd)
    - mkdir -p STANDALONE
    - cp -r INSTALL/share/doc/HepMC3/examples STANDALONE
    - cd STANDALONE/examples
    - mkdir -p BUILD
    - cd BUILD 
    - $CMAKE .. -DUSE_INSTALLED_HEPMC3=ON -DHepMC3_DIR=$TTOP/INSTALL/share/HepMC3/cmake/
    - make -j 4
    - cd $TTOP
.oldstandalonepython: &oldstandalonepython
    - export TTOP=$(pwd)
    - cd python
    - mkdir -p BUILD
    - cd BUILD 
    - $CMAKE .. -DUSE_INSTALLED_HEPMC3=ON -DHepMC3_DIR=$TTOP/INSTALL/share/HepMC3/cmake/ -DHEPMC3_ENABLE_TEST=ON $CACHINGFLAGS
    - make -j 4
    - $CTEST -j 5 --output-on-failure
    - cd $TTOP

.cmake: &cmake
    - $CMAKE -S . -B BUILD -DCMAKE_INSTALL_PREFIX=$(pwd)/INSTALL -DCMAKE_CXX_FLAGS="-Wpedantic -Wall -Wextra"  -DCMAKE_Fortran_FLAGS="-Wpedantic -Wall -Wextra"  ${STANDARDFLAGS} ${EXTRACMAKEFLAGS} $CACHINGFLAGS
    - $CMAKE --build BUILD -j 10  --verbose
    - $CMAKE --install BUILD
    - cd BUILD
    - $CTEST -j 5 --output-on-failure
    - cd ..
    
.oldcmake: &oldcmake
    - mkdir -p BUILD
    - cd  BUILD
    - $CMAKE ..  -DCMAKE_INSTALL_PREFIX=$(pwd)/../INSTALL -DCMAKE_CXX_FLAGS="-Wpedantic -Wall -Wextra" -DCMAKE_Fortran_FLAGS="-Wpedantic -Wall -Wextra"  ${STANDARDFLAGS} ${EXTRACMAKEFLAGS} $CACHINGFLAGS
    - make -j 10  SHELL='sh -x'
    - make install
    - $CTEST -j 5 --output-on-failure
    - cd ..

.ex:  &ex
    - if [ "${TOOLSET}" == "LLVM" ]; then export CXX=clang++; export CC=clang; export FC=gfortran; fi
    - if [ "${TOOLSET}" == "GNU" ]; then export CXX=g++; export CC=gcc; export FC=gfortran; fi
    - if [ "${TOOLSET}" == "INTEL" ]; then source /opt/intel/oneapi/setvars.sh; export CXX=icx; export CC=icx; export FC=ifx; fi
    - export CCACHE_BASEDIR=`pwd`/CACHES/cache-${OS}-${FREL}-${TOOLSET}
    - export CCACHE_DIR=`pwd`/CACHES/cache-${OS}-${FREL}-${TOOLSET}/ccache
    - mkdir -p CCACHE_DIR
    - export CCACHE_COMPILERCHECK=content
    - export CMAKE=cmake
    - export CTEST=ctest
    - if [ "${FREL}" == "7" ]; then export CMAKE=cmake3; CTEST=ctest3; fi
    - if [ "${FREL}" == "0" ]; then export CMAKE=cmake; CTEST=ctest; fi
    - if [ "${FREL}" == "23" ]; then export CMAKE=cmake; CTEST=ctest; fi
    - export CACHINGFLAGS="-DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_C_COMPILER_LAUNCHER=ccache "
    - $CMAKE --version
    - $CTEST --version

.any-cmake: &any-cmake
  extends: .any
  script:
      - *ex
      - *cmake
      - *standalone

.any-oldcmake: &any-oldcmake
  extends: .any
  script:
      - *ex
      - *oldcmake
      - *oldstandaloneexamples
      - *oldstandalonepython

.any-oldcmake-no-python: &any-oldcmake-no-python
  extends: .any
  script:
      - *ex
      - *oldcmake
      - *oldstandaloneexamples


check_commit:
  stage: check_if_dockerfile_updated
  extends: .check_commit
  parallel:
    matrix:
      - { OS: Fedora,    FREL: 41 }
      - { OS: Fedora,    FREL: 40 }
      - { OS: Fedora,    FREL: 38 }
      - { OS: Fedora,    FREL: 37 }
      - { OS: Fedora,    FREL: 35 }
      - { OS: Fedora,    FREL: 34 }
      - { OS: Fedora,    FREL: 33 }
      - { OS: Fedora,    FREL: 27 }
      # - { OS: Fedora,    FREL: 23 }
      - { OS: CentOS,    FREL: 10 }
      - { OS: CentOS,    FREL: 9  }
      - { OS: CentOS,    FREL: 8  }
      - { OS: CentOS,    FREL: 7  }
      - { OS: Archlinux, FREL: 0  }

build_image:
  stage: build_docker_image
  extends: .build_image
  parallel:
    matrix:
      - { OS: Fedora,    FREL: 41 }
      - { OS: Fedora,    FREL: 40 }
      - { OS: Fedora,    FREL: 38 }
      - { OS: Fedora,    FREL: 37 }
      - { OS: Fedora,    FREL: 35 }
      - { OS: Fedora,    FREL: 34 }
      - { OS: Fedora,    FREL: 33 }
      - { OS: Fedora,    FREL: 27 }
      # - { OS: Fedora,    FREL: 23 }
      - { OS: CentOS,    FREL: 10 }
      - { OS: CentOS,    FREL: 9  }
      - { OS: CentOS,    FREL: 8  }
      - { OS: CentOS,    FREL: 7  }
      - { OS: Archlinux, FREL: 0  }
  needs:
    - job: check_commit

cmake_build:
  stage: build
  extends: .any-cmake
  parallel:
    matrix:
      - { OS: Fedora,    FREL: 41, TOOLSET: GNU,  EXTRACMAKEFLAGS: "" }
      - { OS: Fedora,    FREL: 40, TOOLSET: GNU,  EXTRACMAKEFLAGS: "" }
      - { OS: Fedora,    FREL: 38, TOOLSET: GNU,  EXTRACMAKEFLAGS: "" }
      - { OS: Fedora,    FREL: 37, TOOLSET: LLVM, EXTRACMAKEFLAGS: "-DCMAKE_INTERPROCEDURAL_OPTIMIZATION=OFF" }
      - { OS: Fedora,    FREL: 35, TOOLSET: GNU,  EXTRACMAKEFLAGS: "" }
      - { OS: Fedora,    FREL: 34, TOOLSET: GNU,  EXTRACMAKEFLAGS: "" }
      - { OS: Fedora,    FREL: 34, TOOLSET: LLVM, EXTRACMAKEFLAGS: "-DCMAKE_INTERPROCEDURAL_OPTIMIZATION=OFF" }
      - { OS: Fedora,    FREL: 33, TOOLSET: GNU,  EXTRACMAKEFLAGS: "-DHEPMC3_PYTHON_VERSIONS=3,pypy2" }
      - { OS: Fedora,    FREL: 27, TOOLSET: GNU,  EXTRACMAKEFLAGS: "-DHEPMC3_TEST_LZMA:BOOL=OFF -DHEPMC3_TEST_BZIP2:BOOL=OFF" }
      - { OS: CentOS,    FREL: 10, TOOLSET: GNU,  EXTRACMAKEFLAGS: "" }
      - { OS: CentOS,    FREL: 9,  TOOLSET: GNU,  EXTRACMAKEFLAGS: "" }
      # - { OS: CentOS,    FREL: 9,  TOOLSET: INTEL, EXTRACMAKEFLAGS: "-DCMAKE_EXE_LINKER_FLAGS=-lstdc++" }
      - { OS: CentOS,    FREL: 8,  TOOLSET: GNU,  EXTRACMAKEFLAGS: "" }
      - { OS: CentOS,    FREL: 7,  TOOLSET: GNU,  EXTRACMAKEFLAGS: "-DHEPMC3_PYTHON_VERSIONS=3.6" }
      - { OS: Archlinux, FREL: 0,  TOOLSET: GNU,  EXTRACMAKEFLAGS: "" }
  needs:
    - job: build_image

